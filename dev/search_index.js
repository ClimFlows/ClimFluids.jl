var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ClimFluids","category":"page"},{"location":"#ClimFluids","page":"Home","title":"ClimFluids","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ClimFluids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ClimFluids]","category":"page"},{"location":"#ClimFluids.AbstractFluid","page":"Home","title":"ClimFluids.AbstractFluid","text":"AbstractFluid{F,N}\n\nParent type for types describing thermodynamics of a fluid with N components.\n\n\n\n\n\n","category":"type"},{"location":"#ClimFluids.IdealPerfectGas","page":"Home","title":"ClimFluids.IdealPerfectGas","text":"IdealPerfectGas(consvar,kappa,Cp,p0,T0)\n\nReturns an object describing the thermodynamics of a single-component ideal perfect gas. This object can then be used as first argument of thermodynamic functions. Argument consvar defines the conservative variable chosen. Legal values are :temperature, :entropy, :enthalpy, :volume, corresponding to  potential temperature, entropy, potential enthalpy, potential specific volume.\n\n\n\n\n\n","category":"type"},{"location":"#ClimFluids.VarCpPerfectGas-NTuple{5, Any}","page":"Home","title":"ClimFluids.VarCpPerfectGas","text":"VarCpPerfectGas(kappa,Cp,p0,T0,nu)\n\nReturns an object describing the thermodynamics of a single-component perfect gas with variable Cp.  This object can then be used as first argument of thermodynamic functions.\n\n\n\n\n\n","category":"method"},{"location":"#ClimFluids.canonical_state-Union{Tuple{V}, Tuple{F}, Tuple{F, NamedTuple{V}}} where {F, V}","page":"Home","title":"ClimFluids.canonical_state","text":"cstate = canonical_state(fluid, state)\n\nConverts the named tuple state of state variables to the preferred tuple cstate. It is expected that all thermodynamic functions are implemented for arguments (fluid, cstate). This function is used internally to provide fallback implementations for thermodynamic functions.\n\n\n\n\n\n","category":"method"},{"location":"#ClimFluids.conservative_variable","page":"Home","title":"ClimFluids.conservative_variable","text":"consvar = conservative_variable(fluid, state)\n\nReturns the conservative variable given a fluid and a state (named tuple of state variables). Which conservative variable is chosen is a parameter given to the constructor of fluid.\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.exner_functions","page":"Home","title":"ClimFluids.exner_functions","text":"h, v, exner, [exner_q] = exner_functions(fluid, state)\n\nReturns specific enthalpy, regarded as a function of pressure, conservative variable and (if applicable) composition, and its derivatives : specific volume, and Exner-like functions.\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.potential_enthalpy","page":"Home","title":"ClimFluids.potential_enthalpy","text":"hpot = potential_enthalpy(fluid, state)\n\nReturns potential enthalpy given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.potential_temperature","page":"Home","title":"ClimFluids.potential_temperature","text":"theta = potential_temperature(fluid, state)\n\nReturns potential temperature given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.potential_volume","page":"Home","title":"ClimFluids.potential_volume","text":"vpot = potential_volume(fluid, state)\n\nReturns potential volume given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.pressure","page":"Home","title":"ClimFluids.pressure","text":"p = pressure(fluid, state)\n\nReturns pressure given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.sound_speed","page":"Home","title":"ClimFluids.sound_speed","text":"cs = sound_speed(fluid, (;p,T))\n\nReturns the speed of sound given a fluid and a state (named tuple of state variables). Default implementation returns sqrt(sound_speed2(fluid, state)).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.sound_speed2","page":"Home","title":"ClimFluids.sound_speed2","text":"c2 = sound_speed2(fluid, (;p,T))\n\nReturns the squared speed of sound given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.specific_enthalpy","page":"Home","title":"ClimFluids.specific_enthalpy","text":"h = specific_enthalpy(fluid, state)\n\nReturns specific enthalpy given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.specific_entropy","page":"Home","title":"ClimFluids.specific_entropy","text":"s = specific_entropy(fluid, state)\n\nReturns specific entropy given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.specific_internal_energy","page":"Home","title":"ClimFluids.specific_internal_energy","text":"e = specific_internal_energy(fluid, state)\n\nReturns specific internal energy given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.specific_volume","page":"Home","title":"ClimFluids.specific_volume","text":"v = specific_volume(fluid, state)\n\nReturns specific volume given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"},{"location":"#ClimFluids.temperature","page":"Home","title":"ClimFluids.temperature","text":"T = temperature(fluid, state)\n\nReturns temperature given a fluid and a state (named tuple of state variables).\n\n\n\n\n\n","category":"function"}]
}
